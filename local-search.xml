<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Frp内网穿透</title>
    <link href="/2020/04/23/Frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2020/04/23/Frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>想要在家里访问公司局域网服务器资源<br>想要出差在外访问公司、家庭局域网服务器、电脑信息资源</p></blockquote><h2 id="实现内网穿透已知方法"><a href="#实现内网穿透已知方法" class="headerlink" title="实现内网穿透已知方法"></a>实现内网穿透已知方法</h2><h3 id="动态域名"><a href="#动态域名" class="headerlink" title="动态域名"></a>动态域名</h3><blockquote><p>与宽带运营商申请一个动态外网IP地址，初装宽带请放心绝对是内网IP（正常的沟通希望很渺茫，往往需要骂来一个外网IP，保持理性沟通，只为实现目的）<br>一般动态域名路由器都支持设置，如果不支持，可另辟蹊径，在内网服务器定时请求一次DDNS服务商接口<br>最后在内网路由器配置端口转发<br>这是最廉价的解决方案，各类DDNS服务商几乎免费。存在的唯一问题是当动态外网IP发生变更，你的域名指向将会发生延迟（根据配置定时请求时间以及执行时间等因素决定），在加上各级DNS缓存时间，前前后后可能会有不小的时间你将无法访问</p></blockquote><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote><p>家中没有外网 IP 时，如果你有一台固定 IP 的外网 VPS，那么可用它做跳板访问家里内网端口。在 VPS 上启动一个反向代理服务，同时在家里内网服务器上启动另外一个映射服务，那么链接外网 VPS 的 443 端口，可以被反向代理转发到内网的 443 端口上<br>最简单的方案是 ssh -R 反向代理，比如我想把内网另外 192.168.1.3:443 端口暴露给 VPS （ 202.115.8.1 ）的 8443 端口，可以在任意一台内网机器上运行：<br><code>ssh -R 0.0.0.0:8443:192.168.1.3:443  user@202.115.8.1</code><br>这样会让远端（-R ）创建一个新端口（ 8443 ），并把该端口的数据通过 ssh 链接传回来给我，我再把它转发给我能访问的 192.168.1.3:443。在 vps 修改下 /etc/ssh/sshd_config：<br><code>GatewayPorts yes</code><br>这样连接外网 vps 上的 8443 端口相当于连接内网 192.168.1.3 的 443 端口了<br>该方法没有断线重连，连接断了 ssh 进程就会退出，需要额外写脚本来检测重启，或者用 autossh 保活。正儿八经长期用的话，推荐使用专业程序来提供更加稳定高效的方向代理<br>这类服务程序有很多，比如老牌的 ngrok，python 写的 shootback，前者使用麻烦，如果想跑在自架服务器上，还要重新编译代码，配置证书，而后者性能和并发又不是特别好，所以现在大家都用性能更好，配置更简单的 frp，这也是今天重点要将的方案</p></blockquote><h2 id="Frp实际部署"><a href="#Frp实际部署" class="headerlink" title="Frp实际部署"></a>Frp实际部署</h2><h3 id="frp是什么"><a href="#frp是什么" class="headerlink" title="frp是什么"></a>frp是什么</h3><blockquote><p><a href="https://github.com/fatedier/frp/blob/v0.32.1/README_zh.md" target="_blank" rel="noopener">frp</a>是一个反向代理软件，它体积轻量但功能很强大，可以使处于内网或防火墙后的设备对外界提供服务，它支持HTTP、TCP、UDP等众多协议。我们今天仅讨论TCP和UDP相关的内容<br>截止本文完成，frp的最新版本为v0.32.1，本文使用最新版本操作</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.VPS一台（也可以是具有公网IP的实体机）<br>2.访问目标设备（最终要访问的内网设备），下面演示机器为公司局域网服务器<br>3.根据系统架构不同，下载相应frp版本源码</p><h3 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h3><pre><code># 运行如下命令查看处理器架构，根据架构下载不同版本的frp，如果是”X86_64“即可选择”amd64“arch# 根据架构不同，调整版本后执行wget https://github.com/fatedier/frp/releases/download/v0.32.1/frp_0.32.1_linux_amd64.tar.gz# 解压文件tar -zxvf frp_0.32.1_linux_amd64.tar.gz# 更名文件夹，方便使用mv frp_0.32.1_linux_amd64 frp</code></pre><p>具体的服务端设置查看官网<a href="https://github.com/fatedier/frp/blob/v0.32.1/README_zh.md" target="_blank" rel="noopener">README_zh.md</a></p><p>这里相关参数格式做说明：</p><pre><code>[common]bind_port = 7000dashboard_port = 7500token = 12345678dashboard_user = admindashboard_pwd = adminvhost_http_port = 10080vhost_https_port = 10443</code></pre><blockquote><ul><li>“bind_port” 表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到</li><li>“dashboard_port” 是服务端仪表板的端口，若使用 7500 端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看 frp 服务运行信息</li><li>“token” 是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到</li><li>“dashboard_user” 和 “dashboard_pwd” 表示打开仪表板页面登录的用户名和密码，自行设置即可</li><li>“vhost_http_port” 和 “vhost_https_port” 用于反向代理HTTP主机时使用</li></ul></blockquote><p>官网启动服务为通常命令，后台启动方式命令如下：</p><pre><code>nohup ./frps -c frps.ini &amp;# 输出如下内容即表示正常运行nohup: ignoring input and appending output to &#39;nohup.out&#39;# 查看后台运行状态jobs# 如正常后台启动，显示以下内容[1]+  Running                 nohup ./frps -c frps.ini &amp;</code></pre><h3 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h3><p>步骤方式和内容如同服务端设置操作，保留相关客户端文件frpc<em>，删除服务端文件`rm -rf frps</em>`</p><p>具体的服务端设置查看官网<a href="https://github.com/fatedier/frp/blob/v0.32.1/README_zh.md" target="_blank" rel="noopener">README_zh.md</a></p><p>这里相关参数格式做说明：</p><pre><code>[common]server_addr = x.x.x.xserver_port = 7000token = 12345678[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 6000</code></pre><blockquote><ul><li>“server_addr” 为服务端IP地址，填入即可</li><li>“server_port” 为服务器端口，填入你设置的端口号即可，如果未改变就是 7000</li><li>“token” 是你在服务器上设置的连接口令，原样填入即可</li><li>“[ssh]” 为自定义规则，“[xxx]” 表示一个规则名称，便于查询即可</li><li>“type” 表示转发的协议类型，有 TCP 和 UDP 等选项可以选择，如有需要请自行查询 frp 手册</li><li>”local_ip“ 是本地应用所在机器的ip地址，按照实际情况填写</li><li>“local_port” 是本地应用的端口号，按照实际应用工作在本机的端口号填写即可</li><li>“remote_port” 是该条规则在服务端开放的端口号，自己填写并记录即可</li></ul></blockquote><p>同样的官网启动客户端服务为通常命令，后台启动方式命令如下：</p><pre><code>nohup ./frpc -c frpc.ini &amp;# 输出如下内容即表示正常运行nohup: ignoring input and appending output to &#39;nohup.out&#39;# 查看后台运行状态jobs# 如正常后台启动，显示以下内容[1]+  Running                 nohup ./frpc -c frpc.ini &amp;</code></pre>]]></content>
    
    
    <categories>
      
      <category>f&#39;r&#39;p</category>
      
    </categories>
    
    
    <tags>
      
      <tag>f&#39;r&#39;p</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EXCEL连接数据库</title>
    <link href="/2020/03/24/VBA-EXCEL/"/>
    <url>/2020/03/24/VBA-EXCEL/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此博客主要针对macOS系统Excel连接MySQL数据库的设置问题，如果不修改配置文件，在实测过程中是不能成功的<br>这里不建议安装官方两种第三方驱动，用起来比较麻烦OpenLink Software、Actual Technologies</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装MySQL官网ODBC驱动"><a href="#安装MySQL官网ODBC驱动" class="headerlink" title="安装MySQL官网ODBC驱动"></a>安装MySQL官网ODBC驱动</h3><p><a href="https://dev.mysql.com/downloads/connector/odbc/" target="_blank" rel="noopener">官方地址</a><code>https://dev.mysql.com/downloads/connector/odbc/</code><br>根据你要连接的MySQL数据库版本，选择合适版本的驱动下载</p><h3 id="安装iODBC管理工具"><a href="#安装iODBC管理工具" class="headerlink" title="安装iODBC管理工具"></a>安装iODBC管理工具</h3><p><a href="http://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/Downloads#Mac%20OS%20X" target="_blank" rel="noopener">官方地址</a><code>http://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/Downloads#Mac%20OS%20X</code><br>下载时明确Mac系统以及版本</p><h2 id="配置DSN"><a href="#配置DSN" class="headerlink" title="配置DSN"></a>配置DSN</h2><blockquote><p>不做配置在Excel里使用或添加DSN，会显示加载不了ODBC驱动，原因在Excel没有权限去读ODBC驱动文件，其它过多的场景未做测试，以下配置方式可解决问题<br>1、打开iODBC<br><img src="/images/pasted-14.png" srcset="/img/loading.gif" alt="upload successful"><br>2、选择System DSN标签，点击Add添加<br><img src="/images/pasted-15.png" srcset="/img/loading.gif" alt="upload successful"><br>3、选择驱动，ANSI或Unicode是编码的区别，可任意选择<br><img src="/images/pasted-17.png" srcset="/img/loading.gif" alt="upload successful"><br>4、配置需要连接的MySQL数据库参数<br><img src="/images/pasted-16.png" srcset="/img/loading.gif" alt="upload successful"><br>5、进入/usr/local，找到含有connector字眼的目录，进入lib子目录，找到如下两个文件<br><img src="/images/pasted-18.png" srcset="/img/loading.gif" alt="upload successful"><br><img src="/images/pasted-19.png" srcset="/img/loading.gif" alt="upload successful"><br>6、将这两个文件复制到<code>/Library/ODBC</code>目录下，如遇没有权限<code>chown -R roor:wheel</code>，根据自身情况做调整<br><img src="/images/pasted-20.png" srcset="/img/loading.gif" alt="upload successful"><br>7、编辑该目录下odbc.ini文件Driver value值为<code>/Library/ODBC/***.so</code><br><img src="/images/pasted-21.png" srcset="/img/loading.gif" alt="upload successful"><br>8、至此，我们可以在Excel中连接MySQL数据库</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>VBA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>excel</tag>
      
      <tag>vba</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>联通光纤配置</title>
    <link href="/2020/03/04/%E8%81%94%E9%80%9A%E5%85%89%E7%BA%A4%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/03/04/%E8%81%94%E9%80%9A%E5%85%89%E7%BA%A4%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="光猫补充配置"><a href="#光猫补充配置" class="headerlink" title="光猫补充配置"></a>光猫补充配置</h3><p>1、登录管理员账户后，选择 <code>基本配置</code><br><img src="/images/pasted-10.png" srcset="/img/loading.gif" alt="upload successful"></p><p>2、<code>上行线路配置</code>如图做相关配置<br>①：连接方式选择<code>桥接</code>时，拨号的行为将交给路由或其他设备完成<br>交换机要想获得网络许可需连接拨号后的设备入网<br><img src="/images/pasted-11.png" srcset="/img/loading.gif" alt="upload successful"></p><p>公司网络拓扑图<br>①：路由器和交换机并联到光猫LAN1和LAN2<br>②：步骤2设置时，需要明确LAN端口绑定行为<br>③：PPPoE拨号由光猫完成<br><img src="/images/pasted-12.png" srcset="/img/loading.gif" alt="upload successful"></p><h3 id="联通电话故障解决概要"><a href="#联通电话故障解决概要" class="headerlink" title="联通电话故障解决概要"></a>联通电话故障解决概要</h3><p>设备 phone1 或 phone2灯闪烁，以及打入电话时提示占线，拔掉闪烁灯光链路，停止闪烁，说明线路串线或接触不良</p>]]></content>
    
    
    <categories>
      
      <category>Internet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>联通光纤</tag>
      
      <tag>internet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2020/02/28/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/02/28/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">RUNOOB.COM的Markdown教程</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GIt常用命令</title>
    <link href="/2020/02/27/GIt%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/02/27/GIt%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="安装Git-使用Homebrew"><a href="#安装Git-使用Homebrew" class="headerlink" title="安装Git (使用Homebrew)"></a>安装Git (使用<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>)</h4><pre><code class="bash"># Mac用户brew install git# Linux用户sudo yum install gitsudo apt-get install git# Windows用户https://gitforwindows.org</code></pre><h4 id="基本使用（-阮一峰-老师常用Git命令清单）"><a href="#基本使用（-阮一峰-老师常用Git命令清单）" class="headerlink" title="基本使用（@阮一峰 老师常用Git命令清单）"></a>基本使用（@阮一峰 老师<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用Git命令清单</a>）</h4><p><img src="/images/pasted-2.png" srcset="/img/loading.gif" alt="upload successful"></p><blockquote><p>Workspace：工作区；<br>Index / Stage：暂存区；<br>Repository：仓库区（或本地仓库）；<br>Remote：远程仓库；</p></blockquote><h4 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h4><pre><code class="bash"># 在当前目录新建一个Git代码库git init# 新建一个目录，将其初始化为Git代码库git init [project-name]# 克隆一个项目和它的整个代码历史git clone &lt;url&gt;# 克隆指定分支git clone -b &lt;branch-name&gt; [url]# 在服务器上搭建 Git# 1. 需要把现有仓库导出为裸仓库——即一个不包含当前工作目录的裸仓库，相当于 cp -Rf my_project/.git my_project.gitgit clone --bare my_project my_project.git# 2. 上传到服务器scp -r my_project.git user@git.example.com:/opt/git# 3. 克隆下来就可以了git clone user@git.example.com:/opt/git/my_project.git</code></pre><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><pre><code class="bash"># 添加指定文件到暂存区git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录git add &lt;dir&gt;# 监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。git add .# 仅监控已经被add的文件（即tracked file），它会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。git add -u# add . 和 add -u 功能的集合git add -A# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交git add -p# 交互式暂存git add -i# 删除工作区文件，并且将这次删除放入暂存区git rm &lt;file&gt;...# 停止追踪指定文件，但该文件会保留在工作区git rm --cached &lt;file&gt;# 多人开发时,会出现明明在gitignore中忽略了.idea文件夹, 但是提交时仍旧会出现.idea内文件变动的情况# idea已经被git跟踪，之后再加入.gitignore后是没有作用的# 清除.idea的git缓存git rm -r --cached .idea# 改名文件，并且将这个改名放入暂存区git mv &lt;file-original&gt; &lt;file-renamed&gt;# 丢弃工作区的改动git restore &lt;file&gt;...git checkout -- &lt;file&gt;...# 取消暂存，将暂存区文件恢复到工作区git restore --staged &lt;file&gt;...git reset HEAD &lt;file&gt;...# 清理工作目录（注意：谨慎使用）# 使用 git clean -f -d 命令来移除工作目录中所有未追踪的文件以及空的子目录。 -f 意味着 强制 或 “确定移除”git clean -f -d# 如果只是想要看看它会做什么，可以使用 -n 选项来运行命令git clean -d -n# 默认情况下，git clean 命令只会移除没有忽略的未跟踪文件 .gitignore 或其他忽略文件中的模式匹配的文件都不会被移除， 如果你也想要移除那些文件，可以给 clean 命令增加一个 -x 选项。git clean -n -d -x# 使用交互模式git clean -x -i</code></pre><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><pre><code class="bash"># 提交暂存区到仓库区git commit -m &lt;message&gt;# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m &lt;message&gt;# 重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] ...</code></pre><h4 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h4><p>文件在 git/logs/refs/下</p><pre><code class="bash"># 显示有变更的文件git status# 得到简短的状态描述git status -s# 显示当前分支的版本历史git log# 查看所有分支loggit log --all# 查看dev分支 loggit log dev# 显示commit历史，以及每次commit发生变更的文件git log --stat# 在一行显示loggit log --oneline# 显示前5次loggit log -n5# 搜索提交历史，根据关键词git log -S &lt;keyword&gt;# 行日志搜索# 查看 zlib.c 文件中 `git_deflate_bound` 函数的每一次变更, Git 会尝试找出这个函数的范围，然后查找历史记录，并且显示从函数创建之后一系列变更对应的补丁git log -L :git_deflate_bound:zlib.c# 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名git log --follow [file]# 显示某个版本的修改详情git whatchanged &lt;file&gt;# 显示某个版本的修改的细节diffgit whatchanged -p &lt;file&gt;# 显示指定文件相关的每一次diffgit log -p [file]# 显示过去5次提交git log -5 --pretty --oneline# 显示与某个文件有关的所有提交记录git log --pretty=oneline [file]git log -p --pretty=oneline [file]# 显示分支merge关系图git log --graph# 格式化 graphgit log --graph --pretty=format:&#39;%C(bold red)%h %Creset- %C(bold yellow)%d %C(bold cyan)%s %C(bold green)[%cr] %C(bold magenta)[%cn] %C(bold green)[%ci]&#39;# 显示所有提交过的用户，按提交次数排序git shortlog -sn# 显示某次提交的元数据和内容变化git show &lt;commit&gt;# 显示某次提交发生变化的文件git show --name-only &lt;commit&gt;# 显示某次提交时，某个文件的内容git show &lt;commit&gt;:&lt;filename&gt;# 显示当前分支的最近几次操作，可以使用 git reset 撤回相关操作git refloggit reflog --all# 以标准日志的格式输出reflog(引用_日志git log -g [branch-name]# 查看远程分支loggit log &lt;remote-branch&gt;git log remotes/origin/master# 查看 experiment 分支中还有哪些提交尚未被合并入 master 分支git log master..experiment# 显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰git log --left-right master...experiment# 查看在 master 分支中而不在 experiment 分支中的提交git log experiment..master# 查看你即将推送到远端的内容git log origin/master..HEAD# 从提交历史或者工作目录中查找一个字符串或者正则表达式# -n 输出所找到的匹配行行号# --count 输出概述的信息# -p 查看匹配的行是属于哪一个方法或者函数git grep -n &lt;pattern&gt;# 显示指定文件是什么人在什么时间修改过git blame &lt;file&gt;# 显示指定文件，1-10行代码 在什么时间谁修改的git blame -L 1, 10 &lt;file&gt;# 二分查找（会进行分离头指针），可以从多个提交中查找是哪个提交引入了问题git bisect start # 启动git bisect bad   # 标记当前commit 是坏的git bisect good &lt;commit&gt; # 标记好用的哪个commitgit bisect reset # 回到原分支</code></pre><h4 id="比较提交"><a href="#比较提交" class="headerlink" title="比较提交"></a>比较提交</h4><pre><code class="bash"># 显示暂存区和工作区的差异git diff# 显示暂存区和工作区某个文件的差异git diff -- &lt;file&gt;...# 显示暂存区和HEAD（上一个commit）的差异git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异# HEAD 指向当前分支最新的一个commitgit diff HEAD# ^ 父commit， 等效 ~1git diff HEAD HEAD^git diff HEAD HEAD^^git diff HEAD HEAD~1# 显示两次提交之间的差异git diff &lt;first-branch&gt; &lt;second-branch&gt;# 比较两个分支的某些文件的差异git diff &lt;first-branch&gt; &lt;second-branch&gt; -- &lt;file&gt;...# 显示今天你写了多少行代码git diff --shortstat &quot;@{0 day ago}&quot;# 比较当前文件和暂存区文件差异git diff [file]# 比较两次提交之间的差异git diff &lt;commit&gt; &lt;commit&gt;# 比较两次提交之间某些文件的差异git diff &lt;commit&gt; &lt;commit&gt; -- &lt;file&gt;...# 比较暂存区和版本库差异git diff --staged# 比较暂存区和版本库差异git diff --cached# 仅仅比较统计信息git diff --stat# 打补丁git diff &gt; patch# 应用补丁git apply patch# difftool 命令来用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果。git difftool</code></pre><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><p>文件在 .git/refs/heads/下</p><pre><code class="bash"># 列出所有本地分支git branch# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 查看本地所有分支，并显示最后一次提交loggit branch -vgit branch -av# 查看哪些分支已经合并到当前分支git branch --merged# 查看所有包含未合并工作的分支git branch --no-merged# 新建一个分支，但依然停留在当前分支git branch &lt;branch-name&gt;# 新建一个分支，并切换到该分支git checkout -b &lt;branch-name&gt;# 新建一个分支，指向指定commitgit branch &lt;branch-name&gt; &lt;commit&gt;# 新建一个分支，与指定的远程分支建立追踪关系git branch --track &lt;branch&gt; &lt;remote-branch&gt;# 切换到指定分支，并更新工作区git checkout &lt;branch-name&gt;# 切换到上一个分支git checkout -# 分离头指针操作# 可以查看、做试验性的修改及提交，并且可以在切换回一个分支时，丢弃在此状态下所做的提交而不对分支造成影响。git checkout &lt;commit-id&gt;# 可以通过创建分支来保留在分离头指针状态下所做的提交git switch -c &lt;new-branch-name&gt;# 或git checkout -b &lt;new-branch-name&gt;# 撤销分离头指针git switch -# 建立追踪关系，在现有分支与指定的远程分支之间git branch --set-upstream &lt;branch&gt; &lt;remote-branch&gt;git branch --set-upstream-to=origin/dev dev# 修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。git branch -u origin/serverfix# 查看设置的所有跟踪分支git branch -vv# 查看merge帮助git merge -h# 合并指定分支到当前分支，如果没有冲突（Conflict）默认进行Fast Forward（快进，就像在一个分支提交一样），删除分之后，会丢掉分支的信息。git merge &lt;branch&gt;# 强制禁用Fast Forward模式，Git就会在merge时生成一个新的commit，这样从分支历史上就可以看出分支信息。git merge --no-ff -m &lt;&#39;message&#39;&gt; &lt;branch&gt;# 允许合并不相关的历史git merge --allow-unrelated-histories &lt;branch-name&gt;# 选择一个commit，合并进当前分支，可以理解为”挑拣”提交git cherry-pick &lt;commit&gt;# 删除分支git branch -d &lt;branch-name&gt;# 强制删除分支git branch -D &lt;branch-name&gt;# 删除远程分支git push origin --delete &lt;branch-name&gt;git push origin :&lt;branch-name&gt;git branch -dr &lt;remote/branch&gt;</code></pre><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>文件在 .git/refs/tags/下</p><pre><code class="bash"># 列出所有taggit tag# 使用匹配模式列出 taggit tag -l &#39;v1.8.5*&#39;# 新建一个tag在当前commitgit tag &lt;tag-name&gt;# 新建一个tag在当前commit 并进入添加messagegit tag -a &lt;tag-name&gt;# 新建一个tag在当前commit 并添加messagegit tag &lt;tag-name&gt; -m &lt;&#39;message&#39;&gt;# 新建一个tag在指定commitgit tag &lt;tag-name&gt; &lt;commit-id&gt;# 删除本地taggit tag -d &lt;tag-name&gt;# 删除远程taggit push origin :refs/tags/&lt;tag-name&gt;git push origin --delete tag &lt;tag-name&gt;# 查看tag信息git show &lt;tag-name&gt;# 提交指定taggit push &lt;remote&gt; &lt;tag-name&gt;# 提交所有taggit push &lt;remote&gt; --tags# 新建一个分支，指向某个taggit checkout -b &lt;branch-name&gt; &lt;tag-name&gt;</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code class="bash"># 恢复暂存区的指定文件到工作区git checkout &lt;file&gt;# 恢复某个commit的指定文件到暂存区和工作区git checkout &lt;commit&gt; &lt;file&gt;# 恢复暂存区的所有文件到工作区git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset &lt;file&gt;# 重置暂存区与工作区，与上一次commit保持一致git reset --hard# 清空工作区git reset --hard HEAD# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset &lt;commit&gt;# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --hard &lt;commit&gt;# 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset --keep &lt;commit&gt;# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支git revert &lt;commit&gt;# 暂时将未提交的变化移除，稍后再移入（场景：临时有改紧急的任务，当前的状态先放一边）git stash       # 隐藏暂存区git stash save &quot;save message&quot; # 执行存储时，添加备注，方便查找。git stash list  # 查看列表git stash show  # 显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}git stash show -p # 显示第一个存储的改动git stash pop   # 恢复最后一次暂存内容, 将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下git stash apply # 应用某个存储，但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}git stash drop  # 删除暂存区, stash@{$num}存储，从列表中删除这个存储git stash clear # 删除所有缓存的stashgit stash branch &lt;branch-name&gt; # 从储藏创建一个分支git stash --patch # 交互式地提示哪些改动想要储藏、哪些改动需要保存在工作目录中git stash --help  # 查看更多命令</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code class="bash"># 下载远程仓库的所有变动git fetch [remote]# 显示所有远程仓库git remote -v# 显示远程引用的完整列表（引用（指针），包括分支、标签等等。）git ls-remote# 显示某个远程仓库的信息git remote show [remote]# 增加一个新的远程仓库，并命名git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并git pull [remote] [branch]# 上传本地指定分支到远程仓库git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突git push [remote] --force# 推送所有分支到远程仓库git push [remote] --all# 推送所以标签git push [remote] --tags# 设置 origin 默认远程git push -u origin master</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Git 的设置文件为 .gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）</p><pre><code class="bash"># 查看配置帮助手册man git-config# 三个作用域# --local 只对仓库有效，对应 .git/config 文件# --global 对登录用户所有仓库有效，对应 ~/.gitconfig 或 ~/.config/git/config 文件# --system 对系统所有用户有效，不建议使用，对应 /etc/gitconfig 文件# 显示当前的Git配置git config --list# 编辑Git配置文件git config -e [--global]# 设置提交代码时的用户信息git config [--global] user.name &quot;&lt;name&gt;&quot;git config [--global] user.email &lt;email address&gt;# 让Git显示颜色，会让命令输出看起来更醒目git config --global color.ui true# 别名配置git config --global alias.co checkout # git cogit config --global alias.ci commit   # git cigit config --global alias.st status   # git stgit config --global alias.br branch   # git br# 显示最后一次提交信息git config --global alias.last &#39;log -1&#39;# 很酷git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;# 可以把暂存区的修改撤销掉（unstage），重新放回工作区git config --global alias.unstage &#39;reset HEAD&#39;# 配置全局忽略的文件git config --global core.excludesfile &#39;~/.gitignore&#39;# 设置Editor使用atomgit config --global core.editor &quot;atom -w&quot;# 设置Editor使用vimgit config --global core.editor vim# 合并冲突的默认选项 使用diff3做标记git config --global merge.conflictstyle diff3# 解决 git status 显示中文和解决中文乱码git config --global core.quotepath false# 切换成英文echo &quot;alias git=&#39;LANG=en_GB git&#39;&quot; &gt;&gt; ~/.bashrc# 切换成中文echo &quot;alias git=&#39;LANG=zh_CN.UTF-8 git&#39;&quot; &gt;&gt; ~/.bashrc# 在当前项目中，早先创建并已经push到远程的文件及文件夹，将名称大小写更改后，git无法检测出更改.# 关闭git忽略大小写配置，即可检测到大小写名称更改git config core.ignorecase false# 记住密码, 更多参考 https://git-scm.com/book/zh/v2/Git-工具-凭证存储git config --global credential.helper store# 这里设置账号信息被记住7200秒，两个小时。git config --global credential.helper &#39;cache --timeout 7200&#39;git config –-global http.emptyAuth true# 删除保存在本地的git账户git credential-manager uninstall# 缓存账户git config --global credential.helper wincred# 删除凭证vim ~/.git-credentialsgit config --system --unset credential.helper# 删除本地保存密码# windows# 控制面板 -&gt; 用户帐户-&gt; 管理你的凭据-&gt; [Windows 凭据]-&gt; 编辑-&gt;完成# mac# 钥匙串访问 -&gt; 密码 -&gt; 删除对应url的凭证，只能删除对应url的凭证# 列举所有配置git config -l# 修改远程仓库地址git remote set-url origin &lt;url&gt;</code></pre><h4 id="rebase-变基操作"><a href="#rebase-变基操作" class="headerlink" title="rebase 变基操作"></a>rebase 变基操作</h4><p>变基注意：小心使用，在自己分支操作没有问题，如果在共享分支操作会影响其他人，可能会丢失代码，团队中对于公共的分支应禁止使用变基操作。特别是主干分支应只做先进，不应有变基或 push -f 操作。（当然也有为了让主干 log 变的清晰，做 rebase）</p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" target="_blank" rel="noopener">Git 分支 - 变基</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转iTerm</title>
    <link href="/2020/02/26/iterm/"/>
    <url>/2020/02/26/iterm/</url>
    
    <content type="html"><![CDATA[<h3 id="一：shell"><a href="#一：shell" class="headerlink" title="一：shell"></a>一：shell</h3><p>用户使用linux的桥梁，常用的shell有sh、bash、csh、dash等</p><h4 id="查看系统有几种shell"><a href="#查看系统有几种shell" class="headerlink" title="查看系统有几种shell"></a>查看系统有几种shell</h4><pre><code class="bash">cat /etc/shells</code></pre><p>zsh，史称终极shell，快速上手zsh项目oh my zsh，Github网址：<a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">https://github.com/ohmyzsh/ohmyzsh</a></p><h4 id="查看zsh版本"><a href="#查看zsh版本" class="headerlink" title="查看zsh版本"></a>查看zsh版本</h4><pre><code class="bash">zsh --versionecho $ZSH_VERSION</code></pre><h4 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h4><pre><code class="bash">brew install zsh zsh-completions</code></pre><h4 id="查看当前默认shell，以及修改默认shell"><a href="#查看当前默认shell，以及修改默认shell" class="headerlink" title="查看当前默认shell，以及修改默认shell"></a>查看当前默认shell，以及修改默认shell</h4><pre><code class="bash">echo $SHELLchsh -s /bin/zsh </code></pre><p>操作完成后，重新启动iTerm</p><h4 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h4><pre><code class="bash">#方法一：wget自动化安装（先行安装wget）wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh#方法二：curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh #官网上的另外一种写法 sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;#方法三：当然也可以通过git下载git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</code></pre>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
      <category>iTerm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iterm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
